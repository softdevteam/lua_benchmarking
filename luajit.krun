import os
import json
from krun.vm_defs import (GenericScriptingVMDef)
from krun import EntryPoint
from krun.util import fatal

# Who to mail
MAIL_TO = []

# Maximum number of error emails to send per-run
#MAX_MAILS = 2

DIR = os.getcwd()

VM_ENV = '"{0}/?/init.lua;{0}/?.lua;{0}/?/?.lua;"'.format(os.path.join(DIR, "lualibs"))

HEAP_LIMIT = 2097152  # KiB
STACK_LIMIT = 8192  # KiB

VARIANTS = {
    "default-lua": EntryPoint("bench.lua"),
}

N_EXECUTIONS = 15  # Number of fresh process executions.
ITERATIONS_ALL_VMS = 1500
ITERATIONS_NO_JIT = 100
INSTRUMENT = False

def make_env(vmdir, extra=None):
    basedir = os.path.join(DIR, "builds", vmdir)
    ret = {
        'LUA_PATH' : VM_ENV + '"{0}/?/init.lua;{0}/?.lua;{0}/?/?.lua;"'.format(basedir)
    }
    if extra is not None:
        ret.update(extra)
    return ret

def makevmdef(dirname, instrument=False, env_extra=None, n_iterations=None):
    return {
        'vm_def': LuaJITVMDef(os.path.join("builds/", dirname, "luajit"), 
                              env=make_env(dirname, env_extra), instrument=instrument),
        'variants': ['default-lua'],
        'n_iterations': n_iterations or ITERATIONS_ALL_VMS,
    }

class LuaJITVMDef(GenericScriptingVMDef):
    JIT_STATS_MARKER = "@@@ JIT_STATS "
    JIT_STATS_ALL_MARKER = "@@@ JIT_STATS_ALL "

    def __init__(self, vm_path, entry_point=None,
                 subdir=None, env=None, instrument=False):
        GenericScriptingVMDef.__init__(self, vm_path, "iterations_runner.lua",
                                       env=env, instrument=instrument)
        self.iterations_runner = "iterations_runner.lua"

    def run_exec(self, interpreter, iterations, param, heap_lim_k,
                 stack_lim_k, key, key_pexec_idx, force_dir=None,
                 sync_disks=True):
        return self._generic_scripting_run_exec(interpreter, iterations, param,
                                                heap_lim_k, stack_lim_k, key,
                                                key_pexec_idx,
                                                force_dir=force_dir,
                                                sync_disks=sync_disks)

VMS = {
    'RaptorJIT': makevmdef("raptorjit", instrument=INSTRUMENT),
}

BENCHMARKS = {
    "binarytrees" : 2,
    "nbody" : 10,
    "fasta": 40,
    "richards": 30,
    "spectralnorm": 2,
    "fannkuch_redux": 45,
    "md5": 140,
    "series": 2,
    "luacheck_parser": 1,
    "luacheck": 1,
    "capnproto_encode": 240,
    "capnproto_decode": 400,
    "jsonlua_encode": 10,
    "jsonlua_decode": 200,
    "luafun": 4,
}

# list of "bench:vm:variant"
SKIP = [
    "capnproto_decode:GC64:*", # Sometime crashes with GC64
    "capnproto_decode:RaptorJIT:*", # Sometimes crashes as well
	# We Can't use binary Lua modules with raptojit because it statically 
	# linked the Lua shared library that they need
    "moonscript:RaptorJIT:*",
    #"*:Normal:*",
    #"*:GC64:*",
    #"*:NoJIT:*",
    #"*:DualNum:*",
    #"*:RaptorJIT:*",
    #"luacheck:*:*",
    #"luacheck_parser:*:*",
]

# Commands to run before and after each process execution
#
# Environment available for these commands:
#   KRUN_RESULTS_FILE: path to results file.
#   KRUN_LOG_FILE: path to log file.
#   KRUN_ETA_DATUM: time the ETA was computed
#   KRUN_ETA_VALUE: estimated time of completion
#PRE_EXECUTION_CMDS = ["sudo service cron stop"]
#POST_EXECUTION_CMDS = ["sudo service cron start"]

# CPU pinning (off by default)
ENABLE_PINNING = True

# Lower and upper bound for acceptable APERF/MPERF ratios
#AMPERF_RATIO_BOUNDS = 0.995, 1.005

# Rough rate of change in APERF per second above which a core is considered busy.
# For many machines this is simply the base clock frequency, but generally
# speaking, is undefined, so you need to check on a per-machine basis.
#AMPERF_BUSY_THRESHOLD = 3.4 * 1000 * 1000 * 1000 / 1000  # 3.4 GHz / 1000
